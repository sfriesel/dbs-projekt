DROP TABLE IF EXISTS Customer CASCADE;
DROP TABLE IF EXISTS PriceModel CASCADE;
DROP TABLE IF EXISTS Rental CASCADE;
DROP TABLE IF EXISTS Location CASCADE;
DROP TABLE IF EXISTS Director CASCADE;
DROP TABLE IF EXISTS Actor CASCADE;
DROP TABLE IF EXISTS Starring CASCADE;
DROP TABLE IF EXISTS ShotIn CASCADE;
DROP TABLE IF EXISTS Movie CASCADE;
DROP TABLE IF EXISTS DirectedBy CASCADE;
DROP TABLE IF EXISTS Nomination CASCADE;
DROP TABLE IF EXISTS Pricing CASCADE;

CREATE TABLE Customer (
	id integer PRIMARY KEY,
	surname varchar(20),
	forename varchar(15),
	street varchar(50),
	streetnumber varchar(10),
	zip varchar(10),
	city varchar(20),
	telephone varchar(15)
);

CREATE TABLE PriceModel (
	name varchar(15) PRIMARY KEY,
	timeUnit char(1)
);

CREATE TABLE Pricing (
	pricemodel varchar(15),
	category char(1),
	pricePerUnit float,
	CONSTRAINT cat_constraint CHECK (category IN ('A', 'B')),
	CONSTRAINT pk PRIMARY KEY (pricemodel, category),
	CONSTRAINT fk_model FOREIGN KEY (pricemodel) REFERENCES PriceModel(name)
);

CREATE TABLE Location (
	country varchar(50),
	location text PRIMARY KEY
);

CREATE TABLE Director (
	name varchar(100) PRIMARY KEY
);

CREATE TABLE Actor (
	name varchar(100),
	gender varchar(1),
	CONSTRAINT gender_constraint CHECK (gender IN ('m', 'f')),
	CONSTRAINT pk_actor PRIMARY KEY (name, gender)
);

CREATE TABLE Movie (
	title varchar(220) PRIMARY KEY,
	description text,
	category char(1),
	release date,
	rel_country varchar(50),
	CONSTRAINT cat_constraint CHECK (category IN ('A', 'B'))
);

CREATE TABLE Starring (
	movie varchar(220),
	actor varchar(100),
	gender varchar(1),
	CONSTRAINT fk_movie FOREIGN KEY (movie) REFERENCES Movie(title),
	CONSTRAINT fk_actor FOREIGN KEY (actor, gender) REFERENCES Actor(name, gender),
	CONSTRAINT pk_starring PRIMARY KEY (movie, actor, gender)
);

CREATE TABLE ShotIn (
	movie varchar(220),
	location text,
	CONSTRAINT fk_movie FOREIGN KEY (movie) REFERENCES Movie(title),
	CONSTRAINT fk_location FOREIGN KEY (location) REFERENCES Location(location),
	CONSTRAINT pk_shotin PRIMARY KEY (movie, location)
);

CREATE TABLE DirectedBy (
	movie varchar(220),
	director varchar(100),
	CONSTRAINT pk_directedby PRIMARY KEY (movie, director)
);

CREATE TABLE Rental (
	customer integer,
	priceModel varchar(15),
	movie varchar(220),
	start timestamp,
	duration integer,
	CONSTRAINT fk_pricemodel FOREIGN KEY (priceModel) REFERENCES PriceModel(name),
	CONSTRAINT fk_movie FOREIGN KEY (movie) REFERENCES Movie(title),
	CONSTRAINT fk_customer FOREIGN KEY (customer) REFERENCES Customer(id)
);

CREATE TABLE Nomination (
	title varchar(220),
	category varchar(10),
	year integer
);

EXPLAIN INSERT INTO Nomination (title, category, year) VALUES
('Avatar (2009)'                , 'picture' , 2010),
('The Blind Side (2009)'        , 'picture' , 2010),
('District 9 (2009)'            , 'picture' , 2010),
('An Education (2009)'          , 'picture' , 2010),
('The Hurt Locker (2008)'       , 'picture' , 2010),
('Inglourious Basterds (2009)'  , 'picture' , 2010),
('Precious (2009)'              , 'picture' , 2010),
('A Serious Man (2009)'         , 'picture' , 2010),
('Up (2009)'                    , 'picture' , 2010),
('Up in the Air (2009/I)'       , 'picture' , 2010),
('Crazy Heart (2009)'           , 'actor'   , 2010),
('Up in the Air (2009/I)'       , 'actor'   , 2010),
('A Single Man (2009)'          , 'actor'   , 2010),
('Invictus (2009)'              , 'actor'   , 2010),
('The Hurt Locker (2008)'       , 'actor'   , 2010),
('Avatar (2009)'                , 'director', 2010),
('Inglourious Basterds (2009)'  , 'director', 2010),
('The Hurt Locker (2008)'       , 'director', 2010),
('Precious (2009)'              , 'director', 2010),
('Up in the Air (2009/I)'       , 'director', 2010),
('The Blind Side (2009)'        , 'actress' , 2010),
('The Last Station (2009)'      , 'actress' , 2010),
('An Education (2009)'          , 'actress' , 2010),
('Precious (2009)'              , 'actress' , 2010),
('Julie & Julia (2009)'         , 'actress' , 2010),
('The Social Network (2010)'    , 'picture' , 2011),
('Black Swan (2010)'            , 'picture' , 2011),
('The King\'s Speech (2010)'    , 'picture' , 2011),
('Inception (2010)'             , 'picture' , 2011),
('The Kids Are All Right (2010)', 'picture' , 2011),
('127 Hours (2010)'             , 'picture' , 2011),
('Toy Story 3 (2010)'           , 'picture' , 2011),
('True Grit (2010)'             , 'picture' , 2011),
('Winter\'s Bone (2010)'        , 'picture' , 2011),
('The Fighter (2010)'           , 'picture' , 2011),
('Biutiful (2010)'              , 'actor'   , 2011),
('True Grit (2010)'             , 'actor'   , 2011),
('The Social Network (2010)'    , 'actor'   , 2011),
('The King\'s Speech (2010)'    , 'actor'   , 2011),
('127 Hours (2010)'             , 'actor'   , 2011),
('Black Swan (2010)'            , 'director', 2011),
('The Fighter (2010)'           , 'director', 2011),
('The King\'s Speech (2010)'    , 'director', 2011),
('The Social Network (2010)'    , 'director', 2011),
('True Grit (2010)'             , 'director', 2011),
('The Kids Are All Right (2010)', 'actress' , 2011),
('Rabbit Hole (2010)'           , 'actress' , 2011),
('Winter\'s Bone (2010)'        , 'actress' , 2011),
('Black Swan (2010)'            , 'actress' , 2011),
('Blue Valentine (2010)'        , 'actress' , 2011);

INSERT INTO PriceModel (name, timeUnit) VALUES
('starter', 'd'),
('speedy', 'h'),
('flat', 'd');

INSERT INTO Pricing (pricemodel, category, pricePerUnit) VALUES
('starter', 'A', 1.29),
('starter', 'B', 0.79),
('speedy', 'A', 0.19),
('speedy', 'B', 0.15),
('flat', 'A', 0.19),
('flat', 'B', 0.19);
