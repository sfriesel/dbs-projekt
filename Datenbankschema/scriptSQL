DROP TABLE IF EXISTS Customer CASCADE;
DROP TABLE IF EXISTS Transaction CASCADE;
DROP TABLE IF EXISTS PriceModel CASCADE;
DROP TABLE IF EXISTS Rental CASCADE;
DROP TABLE IF EXISTS Location CASCADE;
DROP TABLE IF EXISTS Director CASCADE;
DROP TABLE IF EXISTS Actor CASCADE;
DROP TABLE IF EXISTS Starring CASCADE;
DROP TABLE IF EXISTS ShotIn CASCADE;
DROP TABLE IF EXISTS Movie CASCADE;

CREATE TABLE Customer (
	id integer PRIMARY KEY,
	surname varchar(20),
	forename varchar(15),
	street varchar(50),
	streetnumber varchar(10),
	zip varchar(10),
	city varchar(20),
	telephone varchar(15)
);

CREATE TABLE Transaction (
	id serial PRIMARY KEY
);

CREATE TABLE PriceModel (
	name varchar(15) PRIMARY KEY,
	timeUnit char(1)
);

CREATE TABLE Location (
	country varchar(50),
	location text PRIMARY KEY
);

CREATE TABLE Director (
	forename varchar(20),
	lastname varchar(20),
	CONSTRAINT pk_direktor PRIMARY KEY (forename, lastname)
);

CREATE TABLE Actor (
	forename varchar(20),
	lastname varchar(20),
	gender varchar(1),
	CONSTRAINT pk_actor PRIMARY KEY (forename, lastname),
	CONSTRAINT gender_constraint CHECK (gender IN ('m', 'f'))
);

CREATE TABLE Movie (
	title varchar(220) PRIMARY KEY,
	description text,
	category char(1),
	release date,
	rel_country varchar(50),
	CONSTRAINT cat_constraint CHECK (category IN ('A', 'B'))
);

CREATE TABLE Starring (
	movie varchar(220),
	forename varchar(20),
	lastname varchar(20),
	CONSTRAINT fk_movie FOREIGN KEY (movie) REFERENCES Movie(title),
	CONSTRAINT fk_actor FOREIGN KEY (forename, lastname) REFERENCES Actor(forename, lastname)
);

CREATE TABLE ShotIn (
	movie varchar(220),
	location text,
	CONSTRAINT fk_movie FOREIGN KEY (movie) REFERENCES Movie(title),
	CONSTRAINT fk_location FOREIGN KEY (location) REFERENCES Location(location)
);

CREATE TABLE Rental (
	transaction integer,
	priceModel varchar(15),
	movie varchar(220),
	start date,
	duration integer,
	CONSTRAINT fk_transaction FOREIGN KEY (transaction) REFERENCES Transaction(id),
	CONSTRAINT fk_pricemodel FOREIGN KEY (priceModel) REFERENCES PriceModel(name),
	CONSTRAINT fk_movie FOREIGN KEY (movie) REFERENCES Movie(title)
);

